function [Vout, symbolsTX] = QAM_SC_Tx(dataTX, Tx, sim)
%% Generates QAM signal to drive optical modulator. 
% Note: Transmitter does not have a DAC. Hence, operations such as 
% pulse shaping, modulator nonlinearity and frequency response compensation 
% are not implemented. 
% rectangular NRZ pulses are generated and then filtered by anolog filter
% whose frequency response is given in Tx.filt.H
% Inputs: 
% - DataTX = symbol stream [0, ..., M-1], where M is QAM order
% - Tx, must contain constellation order Tx.const.M and transmitter filter Tx.filt
% - sim = simulation parameters (f, fs, Mct)

% Modulation format
M = sim.M; % Modulation order
if strcmpi(sim.ModFormat, 'QAM');
    modulate = @(X) qammod(X, M, 0, 'gray');
elseif strcmpi(sim.ModFormat, 'DPSK');
    modulate = @(X) sqrt(2)*exp(1j*pi/4)*[dpskmod(X(1:sim.Nsetup), M, 0, 'gray'),...
        dpskmod(X(sim.Nsetup+1:end), M, 0, 'gray')]; 
    % sqrt(2)*exp(1j*pi/4) is necessary because dpskmod generates
    % constellation with radius 1 and rotated by 45 deg with respect to
    % constellation generated by qammod
else
    error('QAM_SC_Tx/invalid modulation format');
end

X = modulate(dataTX(1, :)); % pol X
Y = modulate(dataTX(2, :)); % pol Y

% 
symbolsTX = [X; Y]; % transmitted symbols. Used in data-directed detection

% extract I and Q in x and y
Xi = real(X);
Xq = imag(X);
Yi = real(Y);
Yq = imag(Y);

% create rectangular waveforms for modulators
V1x = reshape(repmat(Xi,sim.Mct,1), 1, sim.N);
V2x = reshape(repmat(Xq,sim.Mct,1), 1, sim.N);
V1y = reshape(repmat(Yi,sim.Mct,1), 1, sim.N);
V2y = reshape(repmat(Yq,sim.Mct,1), 1, sim.N);  

% filter drive waveforms for modulators txfilt.
% group delay of Tx.filt.H has already been removed
Htx = ifftshift(Tx.filt.H(sim.f/sim.fs)); % transmitter filter
Vix = real(ifft(fft(V1x).*Htx));
Vqx = real(ifft(fft(V2x).*Htx)); 
Viy = real(ifft(fft(V1y).*Htx)); 
Vqy = real(ifft(fft(V2y).*Htx));

% Build output
Vout = [Vix + 1j*Vqx; Viy + 1j*Vqy];
