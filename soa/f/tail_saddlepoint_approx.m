%% Calculate tail probability of a random variable generated by the weighted sum of 
%% N noncentral chi square with 2 degrees of freedom and a Guassian r.v.
% Input:
% P(X > x)
% D (Nx1) = weights of noncentral chi square with 2 degrees of freedom.
% xn (N x Nsymb) = equivalent to noncetrality parameter of individual chi squares
% distributions. Each row of xn corresponds to a symbol, and each column 
% corresponds to a chi square distribution. xn = mu1 + 1jmu2, where mu1 and
% mu2 are the means of the original gaussian r.v.s.
% var (1x1) = variance of the Guassians r.v.s. that given origen to the
% Chi square distribution
% varTher = variance of Gaussian r.v. 

% Output:
% ptail = P(X >= x) if tail = 'right' or P(X <= x) if tail = 'left'

function ptail = tail_saddlepoint_approx(x, D, xn, varASE, varTher, tail, Npol)
    if nargin <= 6
        Npol = 1;
    end

    % Enforces positive value in order to calculate right tail (x ->
    % \infty). As a result, tail will only be accurate if x >> E(x)
        
    if strcmp(tail, 'right')
        sign = 1;
    elseif strcmp(tail, 'left')
        sign = -1;
    else
        error('invalid option');
    end
    
    ptail = zeros(size(x));
    for k = 1:length(x)
        
        [shat, ~, exitflag] = fzero(@(s) d1expoent(sign*abs(s), x(k), D, xn, varASE, varTher, Npol), 1e-3);
        shat = sign*abs(shat);

        if exitflag ~= 1
            warning('(x = %g) resulted in exitflag = %d\n', x(k), exitflag);
        end

        Ksx = expoent(shat, x(k), D, xn, varASE, varTher, Npol);
        d2Ksx = d2expoent(shat, D, xn, varASE, varTher, Npol);

        ptail(k) = exp(Ksx)/sqrt(2*pi*d2Ksx);
    end
       
end

% Expoent, and its first and second derivatives 
function Ksx = expoent(s, x, D, xnt, varASE, varTher, Npol)
    Ksx = sum(-Npol*log(1-D*varASE*s) + (D.*abs(xnt).^2*s)./(1-D*varASE*s)) + 0.5*varTher*s^2 - s*x - log(abs(s));
end
    
function d1Ksx = d1expoent(s, x, D, xnt, varASE, varTher, Npol) 
%     d1Ksx = sum(D.*(abs(xnt).^2 + varASE -
%     varASE^2*s)./((1-D*varASE*s).^2)) + varTher*s - x -1/s; (error)
    d1Ksx = sum(D.*(Npol*varASE*(1-D*varASE*s) + abs(xnt).^2)./((1-D*varASE*s).^2)) + varTher*s - x - 1/s;  
end

function d2Ksx = d2expoent(s, D, xnt, varASE, varTher, Npol) 
    d2Ksx = sum(Npol*(D*varASE).^2./(1 - D*varASE*s).^2 + (2*varASE*(D.^2).*abs(xnt).^2)./((1 - D*varASE*s).^3)) + varTher + 1/s^2;
end
    